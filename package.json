{
    "name": "common-lisp",
    "displayName": "Common Lisp",
    "description": "Common Lisp language support for VS Code",
    "author": {
        "name": "Qingpeng Li",
        "email": "qingpeng9802@gmail.com"
    },
    "version": "1.2.11",
    "publisher": "qingpeng",
    "engines": {
        "vscode": "^1.63.0"
    },
    "license": "MIT",
    "categories": [
        "Programming Languages",
        "Snippets"
    ],
    "keywords": [
        "Common Lisp",
        "common lisp",
        "commonlisp",
        "lisp",
        "snippet",
        "snippets",
        "autocomplete",
        "intellisense",
        "syntax"
    ],
    "activationEvents": [
        "onLanguage:commonlisp"
    ],
    "source": "./src/web/extension.ts",
    "browser": "./dist/web/extension.js",
    "contributes": {
        "languages": [
            {
                "id": "commonlisp",
                "aliases": [
                    "Common Lisp",
                    "common lisp",
                    "commonlisp"
                ],
                "extensions": [
                    ".lisp",
                    ".lsp",
                    ".l",
                    ".cl",
                    ".asd",
                    ".asdf"
                ],
                "configuration": "./declaratives/language-configuration.json",
                "icon": {
                    "light": "./images/commonlisp_file_icon.svg",
                    "dark": "./images/commonlisp_file_icon.svg"
                }
            },
            {
                "id": "commonlisp-injection",
                "aliases": [
                    "commonlisp-inj"
                ]
            }
        ],
        "grammars": [
            {
                "language": "commonlisp",
                "scopeName": "source.commonlisp",
                "path": "./syntaxes/commonlisp.tmLanguage.json"
            },
            {
                "language": "commonlisp-injection",
                "scopeName": "markdown.commonlisp.codeblock",
                "path": "./syntaxes/cl_codeblock.tmLanguage.json",
                "injectTo": [
                    "text.html.markdown"
                ],
                "embeddedLanguages": {
                    "meta.embedded.block.commonlisp": "commonlisp"
                }
            }
        ],
        "snippets": [
            {
                "language": "commonlisp",
                "path": "./declaratives/commonlisp_snippets.json"
            }
        ],
        "configuration": {
            "title": "Common Lisp",
            "properties": {
                "commonLisp.StaticAnalysis.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable Language Features Service. If this is disabled, no [Programmatic Language Features](https://code.visualstudio.com/api/language-extensions/programmatic-language-features) will be executed."
                },
                "commonLisp.providers.CompletionItemProviders.user.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable user symbol Completion Item Provider"
                },
                "commonLisp.providers.CompletionItemProviders.original.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable original symbol Completion Item Provider"
                },
                "commonLisp.providers.CompletionItemProviders.loop.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable loop Completion Item Provider"
                },
                "commonLisp.providers.CompletionItemProviders.ampersand.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable start-with-ampersand Completion Item Provider"
                },
                "commonLisp.providers.CompletionItemProviders.asterisk.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable start-with-asterisk Completion Item Provider"
                },
                "commonLisp.providers.CompletionItemProviders.colon.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable start-with-colon Completion Item Provider"
                },
                "commonLisp.providers.CompletionItemProviders.tilde.enabled": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Enable start-with-tilde Completion Item Provider"
                },
                "commonLisp.providers.CompletionItemProviders.sharpsign.enabled": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Enable start-with-sharpsign Completion Item Provider"
                },
                "commonLisp.providers.HoverProviders.original.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable Hover Provider with spec-defined documentation"
                },
                "commonLisp.providers.HoverProviders.user.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable Hover Provider with user-defined documentation"
                },
                "commonLisp.providers.DefinitionProvider.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable Definition Provider"
                },
                "commonLisp.providers.DocumentSymbolProvider.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable Document Symbol Provider"
                },
                "commonLisp.providers.ReferenceProvider.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable Reference Provider"
                },
                "commonLisp.providers.DocumentSemanticTokensProvider.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable Document Semantic Tokens Provider"
                },
                "commonLisp.providers.CallHierarchyProvider.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable Call Hierarchy Provider"
                },
                "commonLisp.ReferenceProvider.ExcludedRanges": {
                    "type": "string",
                    "default": "comment and string",
                    "enum": [
                        "comment and string",
                        "comment",
                        "string",
                        "none"
                    ],
                    "markdownEnumDescriptions": [
                        "Reference results will exclude the ranges inside comments and strings.",
                        "Reference results will exclude the ranges inside comments only.",
                        "Reference results will exclude the ranges inside strings only.",
                        "Reference results will include all the ranges."
                    ]
                },
                "commonLisp.DefinitionProvider.ExcludedRanges": {
                    "type": "string",
                    "default": "none",
                    "markdownDescription": "Note that userHoverProvider will use this config as ExcludedRanges",
                    "enum": [
                        "comment and string",
                        "comment",
                        "string",
                        "none"
                    ],
                    "markdownEnumDescriptions": [
                        "Respond to the selected word which is NOT inside comments and strings.",
                        "Respond to the selected word which is NOT inside comments.",
                        "Respond to the selected word which is NOT inside strings.",
                        "Respond to all the selected words."
                    ]
                },
                "commonLisp.DocumentSemanticTokensProvider.NotColorQuoted": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "If true, any `quote` will NOT be colored."
                },
                "commonLisp.DocumentSemanticTokensProvider.ExcludedRanges": {
                    "type": "string",
                    "default": "comment and string",
                    "enum": [
                        "comment and string",
                        "comment",
                        "string",
                        "none"
                    ],
                    "markdownEnumDescriptions": [
                        "Highlight the tokens which are NOT inside comments and strings.",
                        "Highlight the tokens which are NOT inside comments.",
                        "Highlight the tokens which are NOT inside strings.",
                        "Highlight all the tokens."
                    ]
                },
                "commonLisp.DocumentSemanticTokensProvider.SingleQuoteAndBackQuote.Highlight": {
                    "type": "string",
                    "default": "single quote and backquote's comma only",
                    "enum": [
                        "single quote",
                        "single quote and backquote's comma only",
                        "single quote and backquote's all",
                        "backquote's comma only",
                        "backquote's all",
                        "none"
                    ],
                    "markdownEnumDescriptions": [
                        "Highlight normal tokens and the tokens which are in Single Quote.",
                        "Highlight normal tokens and the tokens which are in Single Quote and BackQuote's comma only.",
                        "Highlight normal tokens and the tokens which are in Single Quote and BackQuote.",
                        "Highlight normal tokens and the tokens which are in BackQuote's comma only.",
                        "Highlight normal tokens and the tokens which are in BackQuote.",
                        "Highlight normal tokens only."
                    ]
                },
                "commonLisp.StaticAnalysis.SingleQuoteAndBackQuote.ExcludedRanges": {
                    "type": "string",
                    "default": "backquote, but comma is saved",
                    "enum": [
                        "single quote",
                        "single quote and backquote, but comma is saved",
                        "single quote and backquote's all",
                        "backquote, but comma is saved",
                        "backquote's all",
                        "none"
                    ],
                    "markdownEnumDescriptions": [
                        "Perform static analysis on normal tokens and the tokens which are NOT in Single Quote.",
                        "Perform static analysis on normal tokens and the tokens which are NOT in Single Quote and NOT in BackQuote, but the start-with-comma part is saved.",
                        "Perform static analysis on normal tokens and the tokens which are NOT in Single Quote and NOT in BackQuote.",
                        "Perform static analysis on normal tokens and the tokens which are NOT in BackQuote, but the start-with-comma part is saved.",
                        "Perform static analysis on normal tokens and the tokens which are NOT in BackQuote.",
                        "Perform static analysis on all the tokens, even though they are in Single Quote or BackQuote."
                    ]
                },
                "commonLisp.ReferenceProvider.BackQuoteFilter.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable BackQuote Filter to only include symbols with commas in the backquote result."
                },
                "commonLisp.DefinitionProvider.BackQuoteFilter.enabled": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable BackQuote Filter to only respond to the symbols with commas in the backquote result."
                }
            }
        }
    },
    "icon": "./images/icon.png",
    "repository": {
        "type": "git",
        "url": "https://github.com/qingpeng9802/vscode-common-lisp.git"
    },
    "bugs": {
        "url": "https://github.com/qingpeng9802/vscode-common-lisp/issues"
    },
    "homepage": "https://github.com/qingpeng9802/vscode-common-lisp/blob/master/README.md",
    "scripts": {
        "package": "vsce package",
        "publish": "vsce publish",
        "publish-pre": "vsce publish --pre-release",
        "bg": "node syntaxes/scripts/build_grammar.mjs",
        "testg": "node syntaxes/scripts/test_grammar.mjs",
        "lint": "eslint src syntaxes/scripts",
        "pretest": "npm run esbuildc",
        "vscode:prepublish": "npm run bg & npm run webpackp",
        "webpackc": "webpack",
        "webpackw": "webpack --watch",
        "webpackp": "webpack --mode production --devtool hidden-source-map",
        "esbuild-base": "esbuild ./src/web/extension.ts --bundle --outfile=./dist/web/extension.js --external:vscode --format=cjs --platform=node",
        "esbuildp": "npm run esbuild-base -- --minify",
        "esbuildc": "npm run esbuild-base -- --sourcemap",
        "esbuildw": "npm run esbuild-base -- --sourcemap --watch",
        "tscc": "tsc -p ./",
        "tsccd": "tsc -p ./ --declaration --declarationMap",
        "diff": "cross-env diff syntaxes/fixtures/baselines syntaxes/fixtures/generated",
        "accept": "copyfiles -u 3 \"syntaxes/fixtures/generated/*\" syntaxes/fixtures/baselines"
    },
    "devDependencies": {
        "@types/js-yaml": "^4.0.9",
        "@types/node": "^20.11.19",
        "@types/vscode": "1.63.0",
        "@types/webpack-env": "^1.18.4",
        "@typescript-eslint/eslint-plugin": "^7.0.1",
        "assert": "^2.1.0",
        "dependency-cruiser": "^16.2.0",
        "esbuild": "^0.20.0",
        "eslint": "^8.56.0",
        "eslint-import-resolver-typescript": "^3.6.1",
        "eslint-plugin-import": "^2.29.1",
        "eslint-plugin-node": "^11.1.0",
        "eslint-plugin-unused-imports": "^3.1.0",
        "fs": "^0.0.1-security",
        "js-yaml": "^4.1.0",
        "process": "^0.11.10",
        "ts-loader": "^9.5.1",
        "typescript": "^5.3.3",
        "unimported": "^1.31.1",
        "webpack": "^5.90.2",
        "webpack-cli": "^5.1.4",
        "copyfiles": "^2.4.1",
        "cross-env": "^7.0.3",
        "vscode-oniguruma": "latest",
        "vscode-textmate": "latest"
    }
}
